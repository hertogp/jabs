#!/usr/bin/env python

"""
read a bunch of config files and list hostname & interface properties
"""


import sys
import socket
import struct
import math
from optparse import OptionParser

from generatorlib import storelast, g_grep, g_cut, g_cat, g_find, g_open


# -- helpers


def qouted(s):
    'ensure proper qouting of a field'
    # create import friendly string from s:
    # - remove ; and ,
    # - remove all double qoutes
    s = s.strip().replace('"', '').replace(';', '|').replace(',', ' ')
    if XLSX:
        return '="%s"' % s  # courtesy of excell
    return '"%s"' % s


def cmd(arr, phrase):
    'case-sensitive check if arr contains the words given'
    # call cmd(g, 'one two') to check g starts with 'one two'
    # call cmd(g[3:5], 'one two') to check words somewhere else in the list
    if phrase is None:
        return False
    words = phrase.split()
    if len(arr) < len(words):
        return False
    return arr[0:len(words)] == words


def atoi(ipaddr):
    'return ipaddr as integer'
    return struct.unpack('>L', socket.inet_aton(ipaddr))[0]


def itoa(ipint):
    'return integer as dotquad ipv4 address'
    return socket.inet_ntoa(struct.pack('>L', ipint))


def pfxlen(mask):
    'return prefix length based on dot quad ipv4 mask'
    i = atoi(mask)
    return 32 - int(math.log(2**32 - i)/math.log(2))


def dotq2pfx(addr, mask):
    'turn network from dotted quads addr, mask into addr/len'
    addr, mask = atoi(addr), atoi(mask)
    netw = addr & mask
    pfxl = 32 - int(math.log(2**32 - mask)/math.log(2))
    return "%s/%s" % (itoa(netw), pfxl)


# -- Options


parser = OptionParser()
parser.add_option('-t', '--top', dest='topdir',
                  help='directory to check for old configs', metavar='TOPDIR')
parser.add_option('-m', '--match', dest='match',
                  help='filter pattern to select files in topdir',
                  metavar='PATTERN')
parser.add_option('-v', '--verbose',
                  action="store_true", dest="verbose", default=False,
                  help="Provides information as we go")
parser.add_option('-x', '--xlsx',
                  action="store_true", dest="xlsx", default=False,
                  help='output IP-s as ="a.b.v.d" so Excell sees a string')

(options, args) = parser.parse_args()

FPATTERN = options.match or '.*'
TOPDIR = options.topdir or '.'
VERBOSE = options.verbose
XLSX = options.xlsx


files = storelast(g_find(FPATTERN, TOPDIR, False))
lines = storelast(g_cat(g_open(files)))
grepped = g_grep(["^\s*hostname",
                  "^\s*interface",
                  "^\s*int ",
                  "^\s*ip address",
                  "^\s*encapsulation",
                  "^\s*ip vrf forwarding",
                  "^\s*ip route vrf",
                  "^\s*snmp-server location",
                  "^\s*shut",
                  "^\s*switchport",
                  "^\s*description"],
                 lines)

# collect hostname, iface, ipaddress, mask
# Usual format is something like:
# hostname <hostname>
# interface <ifacename>
#   ip address <ip> <msk> [secondary]
#   [shutdown]
#   switchport access vlan <nr>

# Running through all lines from all configs we use the following paradigm:
# - track last hostname seen.  Stuff found without a hostname is ignored
# - track last interface seen, stuff found without interface is ignored
# - when ip address is seen, update last hostname/interface seen

last_filename = ''
HOST = ''
IFACE = ''
DTA = {}
cnthosts = {}
fldnames = "vpn ip msk subnet status type vlan allowed native desc loc".split()
for g in g_cut(' ', grepped, range(15)):

    # reset file level vars & others than can be cleared as well
    if last_filename != files.last:
        last_filename = files.last
        HOST = ''   # new file, new host (hopefully)
        IFACE = ''  # reset this also
        LOCATION = ''  # new device, new location
        if VERBOSE:
            print >> sys.stderr, "Reading: ", files.last

    p = [f for f in g]           # preserve case of strings
    g = [f.lower() for f in g]   # lower case fields for easy matching below
    if len(g) < 1:
        continue

    if cmd(g, 'hostname'):
        HOST = ''.join(p[1:])
        IFACE = ''
        DTA[HOST] = {}
        cnthosts[HOST] = 1 + cnthosts.get(HOST, 0)

    elif HOST and (cmd(g, 'interface') or cmd(g, 'int')):
        # len(g) > 1 and (g[0] == 'interface' or g[0] == 'int'):
        IFACE = ''.join(g[1:])
        DTA[HOST][IFACE] = dict(zip(fldnames, ['-']*len(fldnames)))
        if IFACE.startswith('vlan'):
            DTA[HOST][IFACE]['vlan'] = IFACE[4:]
            DTA[HOST][IFACE]['type'] = 'svi'
        elif IFACE.startswith('loopback'):
            DTA[HOST][IFACE]['type'] = 'loopback'
        elif IFACE.startswith('tunnel'):
            DTA[HOST][IFACE]['type'] = 'tunnel'

    elif HOST and cmd(g, 'ip route vrf'):
        # len(g) > 1 and ' '.join(g[0:3]) == 'ip route vrf':
        # fake a static-interface for a static route
        static = 'static%02d' % len([i for i in DTA[HOST].keys() if
                                     i.startswith('static')])
        if g[4] != '0.0.0.0':
            # fake an interface
            DTA[HOST][static] = dict(zip(fldnames, ['-']*len(fldnames)))
            DTA[HOST][static]['vpn'] = qouted(p[3])
            DTA[HOST][static]['ip'] = qouted(g[4])
            DTA[HOST][static]['msk'] = qouted(g[5])
            DTA[HOST][static]['type'] = 'static'
            DTA[HOST][static]['subnet'] = dotq2pfx(g[4], g[5])
            DTA[HOST][static]['desc'] = qouted(' '.join(p[6:]))

    elif HOST and cmd(g, 'snmp-server location'):
        # add host-level location info to all interfaces
        # snmp-server location statement comes after all interface stmts
        for iface in DTA[HOST].keys():
            DTA[HOST][iface]['loc'] = qouted(' '.join(p[2:]))  # actual case

    elif IFACE and cmd(g, 'ip address'):
        DTA[HOST][IFACE]['ip'] = qouted(g[2])
        DTA[HOST][IFACE]['msk'] = qouted(g[3])
        DTA[HOST][IFACE]['subnet'] = dotq2pfx(g[2], g[3])
        if DTA[HOST][IFACE].get('type') == '-':
            DTA[HOST][IFACE]['type'] = 'routed'

    elif IFACE and cmd(g, 'ip vrf forwarding'):
        DTA[HOST][IFACE]['vpn'] = p[3]  # use actual case

    elif IFACE and cmd(g, 'description'):
        if DTA[HOST][IFACE].get('desc') == '-':
            DTA[HOST][IFACE]['desc'] = qouted(' '.join(p[1:]))

    elif IFACE and cmd(g, 'shutdown'):
        DTA[HOST][IFACE]['status'] = g[0]

    elif IFACE and cmd(g, 'encapsulation dot1q'):
        print >> sys.stderr, 'encap', g
        DTA[HOST][IFACE]['vlan'] = g[2]

    elif IFACE and cmd(g, 'switchport access vlan'):
        DTA[HOST][IFACE]['vlan'] = g[3]
        DTA[HOST][IFACE]['type'] = 'access'

    elif IFACE and cmd(g, 'switchport mode trunk'):
        DTA[HOST][IFACE]['type'] = 'trunk'

    elif IFACE and cmd(g, 'switchport trunk allowed vlan add'):
        DTA[HOST][IFACE]['allowed'] += ' '+g[5]

    elif IFACE and cmd(g, 'switchport trunk allowed vlan'):
        DTA[HOST][IFACE]['allowed'] = qouted(g[4])

    elif IFACE and cmd(g, 'switchport trunk native vlan'):
        DTA[HOST][IFACE]['native'] = qouted(g[4])


numDTA = 0
print >> sys.stdout, '%s;%s;%s' % ('host', 'iface', ';'.join(fldnames))
for host, ifaces in DTA.items():
    for iface in ifaces:
        print >> sys.stdout, '%s;%s;%s' % (host, iface, ';'.join(
            [ifaces[iface][fld] for fld in fldnames]))
        numDTA += 1

if VERBOSE:
    print >> sys.stderr, "saw %d interfaces on %d different hosts" % (
        numDTA, len(cnthosts))
    for h in cnthosts:
        if cnthosts[h] > 1:
            print >> sys.stderr, "Saw host", h, cnthosts[h], "times"
